<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:as="using:CarinaStudio.AppSuite"
		xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
		xmlns:asConverters="using:CarinaStudio.AppSuite.Converters"
		xmlns:asViewModels="using:CarinaStudio.AppSuite.ViewModels"
		xmlns:appControls="using:Carina.PixelViewer.Controls"
		xmlns:appConverters="using:Carina.PixelViewer.Data.Converters"
		xmlns:appImageRenderers="using:Carina.PixelViewer.Media.ImageRenderers"
		xmlns:appMedia="using:Carina.PixelViewer.Media"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="Carina.PixelViewer.Controls.ApplicationOptionsDialog">

	<DockPanel>

		<!-- Control buttons -->
		<Border Classes="Dialog_ControlButtonsPanel" DockPanel.Dock="Bottom">
			<StackPanel Classes="Dialog_ControlButtonsPanel">
				<Button Classes="Dialog_ControlButton" Command="{Binding $parent[Window].GenerateResultCommand}" Content="{DynamicResource String/Common.OK}"/>
			</StackPanel>
		</Border>

		<!-- Content -->
		<ScrollViewer Name="contentScrollViewer" MaxHeight="{DynamicResource Double/ApplicationOptionsDialog.Content.MaxHeight}">
			<StackPanel Classes="Dialog_ContentPanel">

				<!-- User interface -->
				<Border Classes="Dialog_TextBlock_Header1">
					<TextBlock Classes="Dialog_TextBlock_Header1" Text="{DynamicResource String/ApplicationOptions.UserInterface}"/>
				</Border>

				<!-- Theme mode -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptions.ThemeMode}"/>
				<ComboBox Classes="Dialog_ComboBox" Items="{Binding ThemeModes, Mode=OneTime}" SelectedItem="{Binding ThemeMode, Mode=TwoWay}">
					<ComboBox.ItemTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding Converter={x:Static asViewModels:ApplicationOptions.ThemeModeConverter}}"/>
						</DataTemplate>
					</ComboBox.ItemTemplate>
				</ComboBox>
				<TextBlock Classes="Dialog_TextBlock_Description_Warning" IsVisible="{Binding IsRestartingMainWindowsNeeded}" Text="{DynamicResource String/ApplicationOptions.WillRestartMainWindowsToTakeEffect}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Enable blurry background -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptions.EnableBlurryBackground}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding EnableBlurryBackground, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Culture -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptions.Culture}"/>
				<asControls:EnumComboBox Classes="Dialog_ComboBox" EnumType="{x:Type as:ApplicationCulture}" SelectedItem="{Binding Culture, Mode=TwoWay}"/>

				<!-- Custom screen scale factor -->
				<StackPanel IsVisible="{Binding IsCustomScreenScaleFactorSupported}">
					<Separator Classes="Dialog_Separator"/>
					<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptions.CustomScreenScaleFactor}"/>
					<NumericUpDown Classes="Dialog_NumericUpDown" FormatString="{}{0:F0}%" Increment="25" Maximum="300" Minimum="100" Value="{Binding CustomScreenScaleFactor, Converter={x:Static asConverters:RatioToPercentageConverter.Default}, Mode=TwoWay}"/>
					<TextBlock Classes="Dialog_TextBlock_Description_Warning" IsVisible="{Binding IsCustomScreenScaleFactorAdjusted}" Text="{DynamicResource String/ApplicationOptions.WillRestartApplicationToTakeEffect}"/>
					<Separator Classes="Dialog_Separator"/>
				</StackPanel>
				<Separator Classes="Dialog_Separator_Large"/>

				<!-- Image format -->
				<Border Classes="Dialog_TextBlock_Header1">
					<TextBlock Classes="Dialog_TextBlock_Header1" Text="{DynamicResource String/ApplicationOptionsDialog.ImageFormat}"/>
				</Border>

				<!-- Default renderer -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.DefaultImageRendererFormatName}"/>
				<ComboBox Classes="Dialog_ComboBox" Items="{x:Static appImageRenderers:ImageRenderers.All}" SelectedItem="{Binding DefaultImageRenderer, Mode=TwoWay}">
					<ComboBox.DataTemplates>
						<DataTemplate DataType="{x:Type appImageRenderers:IImageRenderer}">
							<Grid ColumnDefinitions="*,Auto">
								<TextBlock Text="{Binding Format, Converter={x:Static appConverters:ImageFormatConverter.Default}}" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
								<Border Background="{Binding Format.Category, Converter={x:Static appConverters:ImageFormatCategoryToBrushConverter.Default}}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{DynamicResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" Padding="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
									<TextBlock FontSize="{DynamicResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{Binding Format.Category, Converter={x:Static appConverters:EnumConverters.ImageFormatCategory}}"/>
								</Border>
							</Grid>
						</DataTemplate>
					</ComboBox.DataTemplates>
				</ComboBox>
				<Separator Classes="Dialog_Separator"/>

				<!-- Evaluate by file name -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.EvaluateImageRendererByFileName}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding EvaluateImageRendererByFileName, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Reset renderer after opening file -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.UseDefaultImageRendererAfterOpeningSourceFile}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding UseDefaultImageRendererAfterOpeningSourceFile, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- YUV to RGB conversion -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.DefaultYuvToBgraConverter}"/>
				<ComboBox Classes="Dialog_ComboBox" Items="{x:Static appMedia:YuvToBgraConverter.All}" SelectedItem="{Binding DefaultYuvToBgraConverter, Mode=TwoWay}">
					<ComboBox.ItemTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding Converter={x:Static appConverters:YuvToBgraConverterToStringConverter.Default}}"/>
						</DataTemplate>
					</ComboBox.ItemTemplate>
				</ComboBox>
				<asControls:LinkTextBlock Classes="Dialog_LinkTextBlock_Description" Text="{DynamicResource String/Common.KnowMoreAbout}" Uri="https://en.wikipedia.org/wiki/YUV"/>
				<Separator Classes="Dialog_Separator_Large"/>

				<!-- Image dimensions evaluation -->
				<Border Classes="Dialog_TextBlock_Header1">
					<TextBlock Classes="Dialog_TextBlock_Header1" Text="{DynamicResource String/ApplicationOptionsDialog.ImageDimensionsEvaluation}"/>
				</Border>

				<!-- Default aspect ratio -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.DefaultImageDimensionsEvaluationAspectRatio}"/>
				<asControls:EnumComboBox Classes="Dialog_ComboBox" EnumType="{x:Type appMedia:AspectRatio}" SelectedItem="{Binding DefaultImageDimensionsEvaluationAspectRatio, Mode=TwoWay}"/>
				<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/ApplicationOptionsDialog.DefaultImageDimensionsEvaluationAspectRatio.Description}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Evaluate after opening file -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.EvaluateImageDimensionsAfterOpeningSourceFile}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding EvaluateImageDimensionsAfterOpeningSourceFile, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Evaluate after changing renderer -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.EvaluateImageDimensionsAfterChangingRenderer}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding EvaluateImageDimensionsAfterChangingRenderer, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator_Large"/>

				<!-- Colors -->
				<Border Name="colorSpaceManagementHeader" Classes="Dialog_TextBlock_Header1">
					<TextBlock Classes="Dialog_TextBlock_Header1" Text="{DynamicResource String/ApplicationOptionsDialog.Colors}"/>
				</Border>

				<!-- Show ARGB color -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.ShowSelectedRenderedImagePixelArgbColor}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding ShowSelectedRenderedImagePixelArgbColor, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Show L*a*b* color -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.ShowSelectedRenderedImagePixelLabColor}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding ShowSelectedRenderedImagePixelLabColor, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Show XYZ color -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.ShowSelectedRenderedImagePixelXyzColor}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding ShowSelectedRenderedImagePixelXyzColor, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Enable color space management -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.EnableColorSpaceManagement}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding EnableColorSpaceManagement, Mode=TwoWay}"/>
				<TextBlock Classes="Dialog_TextBlock_Description" Text="{DynamicResource String/ApplicationOptionsDialog.ColorSpaceManagement.Description}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Screen color space -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.ScreenColorSpace}"/>
				<asControls:EnumComboBox Classes="Dialog_ComboBox" EnumType="{x:Type appMedia:ScreenColorSpace}" IsEnabled="{Binding EnableColorSpaceManagement}" SelectedItem="{Binding ScreenColorSpace, Mode=TwoWay}"/>
				<asControls:LinkTextBlock Classes="Dialog_LinkTextBlock_Description" Text="{DynamicResource String/Common.KnowMoreAbout}" Uri="https://en.wikipedia.org/wiki/RGB_color_spaces"/>
				<Separator Classes="Dialog_Separator_Large"/>

				<!-- Other -->
				<Border Classes="Dialog_TextBlock_Header1">
					<TextBlock Classes="Dialog_TextBlock_Header1" Text="{DynamicResource String/ApplicationOptions.Others}"/>
				</Border>

				<!-- Create new tab for drag-and-drop file -->
				<StackPanel IsVisible="{Binding $parent[Window].IsDragAndDropSupported}">
					<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.CreateNewSessionForDragDropFile}"/>
					<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding CreateNewSessionForDragDropFile, Mode=TwoWay}"/>
					<Separator Classes="Dialog_Separator"/>
				</StackPanel>

				<!-- Reset plane options after changing dimensions -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.ResetImagePlaneOptionsAfterChangingImageDimensions}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding ResetImagePlaneOptionsAfterChangingImageDimensions, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Apply orientation on saved images -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.SaveRenderedImageWithOrientation}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding SaveRenderedImageWithOrientation, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Show process info -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.ShowProcessInfo}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding ShowProcessInfo, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Notify application update -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptions.NotifyApplicationUpdate}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding NotifyApplicationUpdate, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Accept non-stable update -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptions.AcceptNonStableApplicationUpdate}"/>
				<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding AcceptNonStableApplicationUpdate, Mode=TwoWay}"/>
				<Separator Classes="Dialog_Separator"/>

				<!-- Max rendered images memory usage -->
				<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptionsDialog.MaxRenderedImagesMemoryUsage}"/>
				<NumericUpDown Name="maxRenderedImageMemoryUsageUpDown" Classes="Dialog_NumericUpDown" Minimum="128" Value="{Binding MaxRenderedImagesMemoryUsageMB, Mode=TwoWay}"/>

				<!-- Log output target port -->
				<StackPanel IsVisible="{Binding $parent[Window].Application.IsDebugMode}">
					<Separator Classes="Dialog_Separator"/>
					<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/ApplicationOptions.LogOutputTargetPort}"/>
					<NumericUpDown Classes="Dialog_NumericUpDown" Maximum="65535" Minimum="1000" Value="{Binding LogOutputTargetPort, Mode=TwoWay}"/>
				</StackPanel>
				
			</StackPanel>
		</ScrollViewer>
		
	</DockPanel>
	
</Window>
