<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:c="using:CarinaStudio"
			 xmlns:asControls="using:CarinaStudio.AppSuite.Controls"
			 xmlns:asConverters="using:CarinaStudio.AppSuite.Converters"
			 xmlns:app="using:Carina.PixelViewer"
             xmlns:appControls="clr-namespace:Carina.PixelViewer.Controls"
             xmlns:appConverters="clr-namespace:Carina.PixelViewer.Data.Converters"
             xmlns:appImageRenderers="clr-namespace:Carina.PixelViewer.Media.ImageRenderers"
             xmlns:appMedia="clr-namespace:Carina.PixelViewer.Media"
			 xmlns:appProfiles="using:Carina.PixelViewer.Media.Profiles"
			 xmlns:ia="using:Avalonia.Xaml.Interactivity"
             xmlns:iaCore="using:Avalonia.Xaml.Interactions.Core"
			 xmlns:sys="using:System"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="Carina.PixelViewer.Controls.SessionControl">
	
	<!-- Resources -->
	<UserControl.Resources>

		<!-- Evaluate image dimensions -->
		<ContextMenu x:Key="evaluateImageDimensionsMenu" PlacementMode="Bottom">
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Unknown}" Header="{DynamicResource String/AspectRatio.Unknown}"/>
			<Separator/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_4x3}" Header="4:3"/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_16x9}" Header="16:9"/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_3x2}" Header="3:2"/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_1x1}" Header="1:1"/>
			<Separator/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_3x4}" Header="3:4"/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_9x16}" Header="9:16"/>
			<MenuItem Command="{Binding EvaluateImageDimensionsCommand}" CommandParameter="{x:Static appMedia:AspectRatio.Ratio_2x3}" Header="2:3"/>
		</ContextMenu>

		<!-- File actions -->
		<ContextMenu x:Key="fileActionsMenu" PlacementMode="Top">
			<MenuItem Command="{Binding $parent[UserControl].CopyFileName}" Header="{DynamicResource String/SessionControl.CopyFileName}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.Copy}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[UserControl].CopyFilePath}" Header="{DynamicResource String/SessionControl.CopyFilePath}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.Copy}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[UserControl].ShowSourceFileInFileExplorer}" Header="{DynamicResource String/SessionControl.ShowFileInExplorer}" IsEnabled="{x:Static c:Platform.IsOpeningFileManagerSupported}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.FileManager}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
		</ContextMenu>

		<!-- Other actions -->
		<ContextMenu x:Key="otherActionsMenu" PlacementMode="Bottom">
			<MenuItem Command="{Binding $parent[UserControl].ShowAppOptions}" Header="{DynamicResource String/SessionControl.ApplicationOptions}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.Settings}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Command="{Binding $parent[UserControl].CheckForAppUpdate}" Header="{DynamicResource String/SessionControl.CheckForApplicationUpdate}">
				<MenuItem.Icon>
					<Border Classes="MenuItem_Icon">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.Update}"/>
					</Border>
				</MenuItem.Icon>
			</MenuItem>
			<Separator/>
			<MenuItem Command="{Binding $parent[UserControl].ShowAppInfo}" Header="{DynamicResource String/SessionControl.ApplicationInfo}"/>
		</ContextMenu>
		
	</UserControl.Resources>

	<!-- Content -->
	<Grid RowDefinitions="Auto,*,Auto">

		<!-- Tool bar -->
		<Border Classes="ToolBar">
			<Grid ColumnDefinitions="*,Auto">

				<!-- Image actions -->
				<WrapPanel Orientation="Horizontal">

					<!-- Open file -->
					<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].OpenSourceFileCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.OpenSourceFile}">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.OpenFile}"/>
					</Button>

					<!-- Save image -->
					<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].SaveImageCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.SaveImage}">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.Save}"/>
					</Button>

					<!-- Separator -->
					<Separator Classes="ToolBar_Separator"/>

					<!-- Fit to viewport -->
					<ToggleButton Classes="ToolBar_ToggleButton" IsChecked="{Binding FitRenderedImageToViewport, Mode=TwoWay}" IsEnabled="{Binding IsSourceFileOpened}" ToolTip.Tip="{DynamicResource String/SessionControl.FitRenderedImageToViewport}">
						<Panel>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.FitToScreen}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.FitToScreen.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
						</Panel>
					</ToggleButton>

					<!-- Zoom-out -->
					<RepeatButton Classes="ToolBar_RepeatButton" Command="{Binding ZoomOutCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.ZoomOut}">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.ZoomOut}"/>
					</RepeatButton>

					<!-- Zoom -->
					<Panel>
						<TextBlock Classes="ToolBar_TextBlock" Opacity="0" Text="0000%"/>
						<TextBlock Classes="ToolBar_TextBlock" HorizontalAlignment="Center" Text="{Binding RenderedImageScale, Converter={x:Static asConverters:RatioToPercentageConverter.Default}}"/>
					</Panel>

					<!-- Zoom-in -->
					<RepeatButton Classes="ToolBar_RepeatButton" Command="{Binding ZoomInCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.ZoomIn}">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.ZoomIn}"/>
					</RepeatButton>

					<!-- Separator -->
					<Separator Classes="ToolBar_Separator"/>

					<!-- Rotate-left -->
					<Button Classes="ToolBar_Button" Command="{Binding RotateLeftCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.RotateLeft}">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.RotateLeft}"/>
					</Button>

					<!-- Rotation -->
					<Panel>
						<TextBlock Classes="ToolBar_TextBlock" Opacity="0" Text="0000"/>
						<TextBlock Classes="ToolBar_TextBlock" HorizontalAlignment="Center" Text="{Binding EffectiveRenderedImageRotation, Converter={x:Static appConverters:DegreesToStringConverter.Default}}"/>
					</Panel>

					<!-- Rotate-right -->
					<Button Classes="ToolBar_Button" Command="{Binding RotateRightCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.RotateRight}">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.RotateRight}"/>
					</Button>

					<!-- Separator -->
					<Separator Classes="ToolBar_Separator"/>

					<!-- Histograms -->
					<ToggleButton Name="histogramsButton" Classes="ToolBar_ToggleButton" Command="{Binding $parent[UserControl].ShowHideHistograms}" ToolTip.Tip="{DynamicResource String/SessionControl.Histograms}">
						<Panel>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Histogram}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Histogram.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
						</Panel>
					</ToggleButton>

					<!-- Separator -->
					<Separator Classes="ToolBar_Separator"/>

					<!-- Frame navigation -->
					<StackPanel Orientation="Horizontal">

						<!-- First frame -->
						<Button Classes="ToolBar_Button" Command="{Binding MoveToFirstFrameCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.MoveToFirstFrame}">
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.FastBackward}"/>
						</Button>

						<!-- Previous frame -->
						<RepeatButton Classes="ToolBar_RepeatButton" Command="{Binding MoveToPreviousFrameCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.MoveToPreviousFrame}">
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Backward}"/>
						</RepeatButton>

						<!-- Frame -->
						<Button Classes="ToolBar_Button" Command="{Binding $parent[UserControl].MoveToSpecificFrame}" IsEnabled="{Binding HasMultipleFrames}" ToolTip.Tip="{DynamicResource String/SessionControl.MoveToSpecificFrame}" Width="NaN">
							<Panel>
								<TextBlock Classes="ToolBar_TextBlock" Opacity="0" Text="000 / 000"/>
								<TextBlock Classes="ToolBar_TextBlock" HorizontalAlignment="Center">
									<TextBlock.Text>
										<MultiBinding StringFormat="{}{0} / {1}">
											<Binding Path="FrameNumber"/>
											<Binding Path="FrameCount"/>
										</MultiBinding>
									</TextBlock.Text>
								</TextBlock>
							</Panel>
						</Button>

						<!-- Next frame -->
						<RepeatButton Classes="ToolBar_RepeatButton" Command="{Binding MoveToNextFrameCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.MoveToNextFrame}">
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Forward}"/>
						</RepeatButton>

						<!-- Last frame -->
						<Button Classes="ToolBar_Button" Command="{Binding MoveToLastFrameCommand}" ToolTip.Tip="{DynamicResource String/SessionControl.MoveToLastFrame}">
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.FastForward}"/>
						</Button>
						
					</StackPanel>

					<!-- Separator -->
					<Separator Classes="ToolBar_Separator"/>

					<!-- Brightness and contrast adjustment -->
					<ToggleButton Name="brightnessAndContrastAdjustmentButton" Classes="ToolBar_ToggleButton" Command="{Binding $parent[UserControl].OpenBrightnessAndContrastAdjustmentPopup}" IsEnabled="{Binding IsBrightnessAdjustmentSupported}" ToolTip.Tip="{DynamicResource String/SessionControl.BrightnessAndContrastAdjustment}">
						<Panel>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Contrast}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Contrast.Active}" IsVisible="{Binding HasBrightnessAdjustment}"/>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Contrast.Active}" IsVisible="{Binding HasContrastAdjustment}"/>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Contrast.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							<Popup Name="brightnessAndContrastAdjustmentPopup" Classes="SessionControl_FilterParamsPopup">
								<Border Classes="SessionControl_FilterParamsPopup">
									<DockPanel>
										<Border Classes="Dialog_ControlButtonsPanel" Background="{x:Null}" DockPanel.Dock="Bottom">
											<StackPanel Classes="Dialog_ControlButtonsPanel">
												<Button Classes="Dialog_ControlButton" Command="{Binding $parent[UserControl].ResetBrightnessAndContrastAdjustmentCommand}" Content="{DynamicResource String/Common.Reset}"/>
											</StackPanel>
										</Border>
										<StackPanel Classes="Dialog_ContentPanel">

											<!-- Brightness -->
											<StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
												<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Center" Text="{DynamicResource String/SessionControl.BrightnessAndContrastAdjustment.Label.Brightness}" VerticalAlignment="Center"/>
												<Separator Classes="Dialog_Separator_Small"/>
												<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Center" Text="{Binding BrightnessAdjustment, StringFormat={}{0:+0.00;-0.00} EV}" VerticalAlignment="Center"/>
											</StackPanel>
											<Slider Classes="SessionControl_FilterParamsSlider" Maximum="2" Minimum="-2" Ticks="-2,-1.84,-1.67,-1.5,-1.33,-1.17,-1,-0.84,-0.67,-0.5,-0.33,-0.17,0,0.17,0.33,0.5,0.67,0.84,1,1.17,1.33,1.5,1.67,1.84,2" Value="{Binding BrightnessAdjustment, Mode=TwoWay}"/>
											<Separator Classes="Dialog_Separator"/>

											<!-- Contrast -->
											<StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
												<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Center" Text="{DynamicResource String/SessionControl.BrightnessAndContrastAdjustment.Label.Contrast}" VerticalAlignment="Center"/>
												<Separator Classes="Dialog_Separator_Small"/>
												<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Center" Text="{Binding ContrastAdjustment, StringFormat={}{0:+0.0;-0.0}}" VerticalAlignment="Center"/>
											</StackPanel>
											<Slider Classes="SessionControl_FilterParamsSlider" Maximum="1" Minimum="-1" Ticks="-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1" Value="{Binding ContrastAdjustment, Mode=TwoWay}"/>

										</StackPanel>
									</DockPanel>
								</Border>
							</Popup>
						</Panel>
					</ToggleButton>

					<!-- Color adjustment -->
					<ToggleButton Name="colorAdjustmentButton" Classes="ToolBar_ToggleButton" Command="{Binding $parent[UserControl].OpenColorAdjustmentPopup}" IsEnabled="{Binding IsColorAdjustmentSupported}" ToolTip.Tip="{DynamicResource String/SessionControl.ColorAdjustment}">
						<Panel>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Color}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Color.Active}" IsVisible="{Binding HasColorAdjustment}"/>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.Color.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
							<Popup Name="colorAdjustmentPopup" Classes="SessionControl_FilterParamsPopup">
								<Border Classes="SessionControl_FilterParamsPopup">
									<DockPanel>
										<Border Classes="Dialog_ControlButtonsPanel" Background="{x:Null}" DockPanel.Dock="Bottom">
											<StackPanel Classes="Dialog_ControlButtonsPanel">
												<Button Classes="Dialog_ControlButton" Command="{Binding ResetColorAdjustmentCommand}" Content="{DynamicResource String/Common.Reset}"/>
											</StackPanel>
										</Border>
										<StackPanel Classes="Dialog_ContentPanel">
											<StackPanel.Styles>
												<Style Selector="Slider">
													<Setter Property="Maximum" Value="1"/>
													<Setter Property="Minimum" Value="-1"/>
													<Setter Property="Ticks" Value="-1,-0.9,-0.8,-0.7,-0.6,-0.5,-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1"/>
												</Style>
											</StackPanel.Styles>
											<StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
												<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Center" Text="{DynamicResource String/SessionControl.ColorAdjustment.Label.Red}" VerticalAlignment="Center"/>
												<Separator Classes="Dialog_Separator_Small"/>
												<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Center" Text="{Binding RedColorAdjustment, StringFormat={}{0:+0.0;-0.0}}" VerticalAlignment="Center"/>
											</StackPanel>
											<Slider Classes="SessionControl_FilterParamsSlider" Value="{Binding RedColorAdjustment, Mode=TwoWay}"/>
											<Separator Classes="Dialog_Separator"/>
											<StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
												<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Center" Text="{DynamicResource String/SessionControl.ColorAdjustment.Label.Green}" VerticalAlignment="Center"/>
												<Separator Classes="Dialog_Separator_Small"/>
												<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Center" Text="{Binding GreenColorAdjustment, StringFormat={}{0:+0.0;-0.0}}" VerticalAlignment="Center"/>
											</StackPanel>
											<Slider Classes="SessionControl_FilterParamsSlider" Value="{Binding GreenColorAdjustment, Mode=TwoWay}"/>
											<Separator Classes="Dialog_Separator"/>
											<StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
												<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Center" Text="{DynamicResource String/SessionControl.ColorAdjustment.Label.Blue}" VerticalAlignment="Center"/>
												<Separator Classes="Dialog_Separator_Small"/>
												<TextBlock Classes="Dialog_TextBlock" HorizontalAlignment="Center" Text="{Binding BlueColorAdjustment, StringFormat={}{0:+0.0;-0.0}}" VerticalAlignment="Center"/>
											</StackPanel>
											<Slider Classes="SessionControl_FilterParamsSlider" Value="{Binding BlueColorAdjustment, Mode=TwoWay}"/>
										</StackPanel>
									</DockPanel>
								</Border>
							</Popup>
						</Panel>
					</ToggleButton>

				</WrapPanel>

				<!-- Other actions -->
				<StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Top">

					<!-- Test -->
					<Button Name="testButton" Classes="ToolBar_Button" Command="{Binding $parent[UserControl].OnTestButtonClick}" IsVisible="False">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.Lab}"/>
					</Button>

					<!-- Other actions -->
					<ToggleButton Name="otherActionsButton" Classes="ToolBar_ToggleButton" Command="{Binding $parent[UserControl].ShowOtherActions}" ToolTip.Tip="{DynamicResource String/SessionControl.OtherActions}">
						<Panel>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.More}" IsVisible="{Binding !$parent[ToggleButton].IsChecked}"/>
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.More.Light}" IsVisible="{Binding $parent[ToggleButton].IsChecked}"/>
						</Panel>
					</ToggleButton>
					
				</StackPanel>

			</Grid>
		</Border>
		<ProgressBar Background="{x:Null}" CornerRadius="0" IsIndeterminate="True" IsVisible="{Binding IsProcessingImage}" MaxHeight="{DynamicResource Double/SessionControl.ImageProgressBar.Height}" MinHeight="{DynamicResource Double/SessionControl.ImageProgressBar.Height}" VerticalAlignment="Bottom"/>

		<!-- Viewer -->
		<Grid Grid.Row="1">

			<!-- Columns -->
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition MaxWidth="400" MinWidth="300" Width="300"/>
			</Grid.ColumnDefinitions>

			<!-- Histograms -->
			<Border Background="{DynamicResource Brush/WorkingArea.Background}"/>
			<Border Name="histogramsPanel" Background="{DynamicResource Brush/WorkingArea.Panel.Background}">
				<Border.RenderTransform>
					<TranslateTransform>
						<TranslateTransform.Transitions>
							<Transitions>
								<DoubleTransition Property="X" Duration="{StaticResource TimeSpan/SessionControl.HistogramsPanel.Transition}" Easing="ExponentialEaseOut"/>
							</Transitions>
						</TranslateTransform.Transitions>
					</TranslateTransform>
				</Border.RenderTransform>
				<Border.Transitions>
					<Transitions>
						<DoubleTransition Property="Opacity" Duration="{StaticResource TimeSpan/SessionControl.HistogramsPanel.Transition}" Easing="ExponentialEaseOut"/>
					</Transitions>
				</Border.Transitions>
				<ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
					<StackPanel Margin="{DynamicResource Thickness/SessionControl.OptionsPanel.Padding}">

						<!-- Styles -->
						<StackPanel.Styles>
							<Style Selector="appControls|BitmapHistogramsView">
								<Setter Property="Height" Value="{DynamicResource Double/SessionControl.Histogram.Height}"/>
								<Setter Property="Width" Value="{DynamicResource Double/SessionControl.Histogram.Width}"/>
							</Style>
						</StackPanel.Styles>

						<!-- Luminance -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Histogram.Luminance}"/>
						<appControls:BitmapHistogramsView DataContext="{Binding Histograms}" IsLuminanceHistogramVisible="True"/>
						<Separator Classes="Dialog_Separator"/>

						<!-- Red -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Histogram.Red}"/>
						<appControls:BitmapHistogramsView DataContext="{Binding Histograms}" IsRedHistogramVisible="True"/>
						<Separator Classes="Dialog_Separator"/>

						<!-- Green -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Histogram.Green}"/>
						<appControls:BitmapHistogramsView DataContext="{Binding Histograms}" IsGreenHistogramVisible="True"/>
						<Separator Classes="Dialog_Separator"/>

						<!-- Blue -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Histogram.Blue}"/>
						<appControls:BitmapHistogramsView DataContext="{Binding Histograms}" IsBlueHistogramVisible="True"/>
						
					</StackPanel>
				</ScrollViewer>
			</Border>

			<!-- Image viewer -->
			<Grid Background="{DynamicResource Brush/WorkingArea.Background}" DragDrop.AllowDrop="True" Grid.Column="1">

				<!-- Drag-drop hint -->
				<Border IsVisible="{Binding !IsOpeningSourceFile}">
					<StackPanel HorizontalAlignment="Center" IsVisible="{Binding !IsSourceFileOpened}" Orientation="Horizontal" VerticalAlignment="Center">
						<TextBlock Classes="SessionControl_ImageViewer_Hint_TextBlock" Text="{DynamicResource String/SessionControl.DragDropHint.Section1}"/>
						<Border Classes="SessionControl_ImageViewer_Hint_Icon">
							<Image Classes="Icon" Source="{DynamicResource Image/Icon.OpenFile}"/>
						</Border>
						<TextBlock Classes="SessionControl_ImageViewer_Hint_TextBlock" Text="{DynamicResource String/SessionControl.DragDropHint.Section2}"/>
					</StackPanel>
				</Border>

				<!-- Opening file hint -->
				<StackPanel HorizontalAlignment="Center" IsVisible="{Binding IsOpeningSourceFile}" Orientation="Horizontal" VerticalAlignment="Center">
					<Border Classes="SessionControl_ImageViewer_Hint_Icon">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.OpenFile}"/>
					</Border>
					<TextBlock Classes="SessionControl_ImageViewer_Hint_TextBlock" Text="{DynamicResource String/SessionControl.OpeningSourceFile}"/>
				</StackPanel>

				<!-- Insufficient memory hint -->
				<StackPanel HorizontalAlignment="Center" IsVisible="{Binding InsufficientMemoryForRenderedImage}" Orientation="Horizontal" VerticalAlignment="Center">
					<Border Classes="SessionControl_ImageViewer_Hint_Icon">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.Warning}"/>
					</Border>
					<TextBlock Classes="SessionControl_ImageViewer_Hint_TextBlock" Text="{DynamicResource String/SessionControl.InsufficientMemoryForRenderedImageHint}"/>
				</StackPanel>

				<!-- Rendering error -->
				<StackPanel HorizontalAlignment="Center" IsVisible="{Binding HasRenderingError}" Orientation="Horizontal" VerticalAlignment="Center">
					<Border Classes="SessionControl_ImageViewer_Hint_Icon">
						<Image Classes="Icon" Source="{DynamicResource Image/Icon.Error}"/>
					</Border>
					<TextBlock Classes="SessionControl_ImageViewer_Hint_TextBlock" Text="{DynamicResource String/SessionControl.RenderingErrorOccurred}"/>
				</StackPanel>

				<!-- Image -->
				<ScrollViewer x:Name="imageScrollViewer" AllowAutoHide="False" HorizontalScrollBarVisibility="{Binding !FitRenderedImageToViewport, Converter={x:Static appControls:SessionControl.BooleanToScrollBarVisibilityConverter}}" PointerPressed="OnImageScrollViewerPointerPressed" PropertyChanged="OnImageScrollViewerPropertyChanged" VerticalScrollBarVisibility="{Binding !FitRenderedImageToViewport, Converter={x:Static appControls:SessionControl.BooleanToScrollBarVisibilityConverter}}">
					<LayoutTransformControl Margin="{DynamicResource Thickness/SessionControl.ImageViewer.Padding}">
						<Border>
							<Viewbox x:Name="imageViewbox" Stretch="{Binding FitRenderedImageToViewport, Converter={x:Static appControls:SessionControl.BooleanToMediaStretchConverter}}">
								<Grid HorizontalAlignment="Center" VerticalAlignment="Center">
									<Border>
										<Border.Background>
											<ImageBrush DestinationRect="0,0,100,100" Source="/Resources/RenderedImageBackground.png" TileMode="Tile"/>
										</Border.Background>
									</Border>
									<Image x:Name="image" PointerLeave="OnImagePointerLeave" PointerMoved="OnImagePointerMoved" Source="{Binding RenderedImage}"/>
								</Grid>
							</Viewbox>
						</Border>
						<LayoutTransformControl.LayoutTransform>
							<TransformGroup>
								<ScaleTransform ScaleX="{Binding $parent[UserControl].EffectiveRenderedImageScale}" ScaleY="{Binding $parent[UserControl].EffectiveRenderedImageScale}"/>
								<RotateTransform Angle="{Binding EffectiveRenderedImageRotation}"/>
							</TransformGroup>
						</LayoutTransformControl.LayoutTransform>
					</LayoutTransformControl>
				</ScrollViewer>
				
			</Grid>

			<!-- Options panel -->
			<Border Background="{DynamicResource Brush/WorkingArea.Panel.Background}" Grid.Column="3">
				<ScrollViewer HorizontalScrollBarVisibility="Disabled">
					<StackPanel Margin="{DynamicResource Thickness/SessionControl.OptionsPanel.Padding}">

						<!-- Profile -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Profile}"/>
						<ComboBox Classes="Dialog_ComboBox" IsEnabled="{Binding IsSourceFileOpened}" Items="{Binding Profiles}" SelectedItem="{Binding Profile, Mode=TwoWay}">
							<ComboBox.DataTemplates>
								<DataTemplate>
									<StackPanel Orientation="Horizontal">
										<Border Height="{DynamicResource Double/SessionControl.ImageRenderingProfile.Icon.Size}" Margin="{DynamicResource Thickness/SessionControl.ImageRenderingProfile.Icon.Margin}" VerticalAlignment="Center" Width="{DynamicResource Double/SessionControl.ImageRenderingProfile.Icon.Size}">
											<Image Classes="Icon" Source="{Binding Converter={x:Static appConverters:ImageRenderingProfileIconConverter.Default}}"/>
										</Border>
										<TextBlock Text="{Binding Name}" VerticalAlignment="Center"/>
									</StackPanel>
								</DataTemplate>
							</ComboBox.DataTemplates>
						</ComboBox>
						<Separator Classes="Dialog_Separator"/>

						<!-- Data offset -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.DataOffset}"/>
						<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" Minimum="0" Value="{Binding DataOffset, Mode=TwoWay}"/>
						<Separator Classes="Dialog_Separator"/>

						<!-- Frame padding bytes -->
						<StackPanel IsVisible="{Binding HasMultipleFrames}">
							<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.FramePaddingSize}"/>
							<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" Minimum="0" Value="{Binding FramePaddingSize, Mode=TwoWay}"/>
							<Separator Classes="Dialog_Separator"/>
						</StackPanel>

						<!-- Image renderer -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.ImageRenderer}"/>
						<ComboBox Classes="Dialog_ComboBox" IsEnabled="{Binding IsSourceFileOpened}" Items="{x:Static appImageRenderers:ImageRenderers.All}" SelectedItem="{Binding ImageRenderer, Mode=TwoWay}">
							<ComboBox.DataTemplates>
								<DataTemplate DataType="{x:Type appImageRenderers:IImageRenderer}">
									<Grid ColumnDefinitions="*,Auto">
										<TextBlock Text="{Binding Format.DisplayName}" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
										<Border Background="{Binding Format.Category, Converter={x:Static appConverters:ImageFormatCategoryToBrushConverter.Default}}" BorderBrush="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Border}" BorderThickness="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Border}" CornerRadius="{DynamicResource CornerRadius/SessionControl.ImageFormatCategoryLabel}" Grid.Column="1" Padding="{DynamicResource Thickness/SessionControl.ImageFormatCategoryLabel.Padding}" VerticalAlignment="Center">
											<TextBlock FontSize="{DynamicResource Double/SessionControl.ImageFormatCategoryLabel.FontSize}" FontWeight="Bold" Foreground="{DynamicResource Brush/SessionControl.ImageFormatCategoryLabel.Foreground}" Text="{Binding Format.Category}"/>
										</Border>
									</Grid>
								</DataTemplate>
							</ComboBox.DataTemplates>
						</ComboBox>
						<Separator Classes="Dialog_Separator"/>

						<!-- Byte ordering -->
						<StackPanel IsVisible="{Binding HasMultipleByteOrderings}">
							<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.ByteOrdering}"/>
							<asControls:EnumComboBox Classes="Dialog_ComboBox" EnumType="{x:Type app:ByteOrdering}" SelectedItem="{Binding ByteOrdering, Mode=TwoWay}"/>
							<Separator Classes="Dialog_Separator"/>
						</StackPanel>

						<!-- Demisaicing -->
						<StackPanel IsVisible="{Binding IsDemosaicingSupported}">
							<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.Demosaicing}"/>
							<ToggleSwitch Classes="Dialog_ToggleSwitch" IsChecked="{Binding Demosaicing, Mode=TwoWay}"/>
							<Separator Classes="Dialog_Separator"/>
						</StackPanel>

						<!-- Dimensions -->
						<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.ImageDimensions}"/>
						<Grid ColumnDefinitions="*,Auto,*">
							<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" Maximum="65535" Minimum="1" Value="{Binding ImageWidth, Mode=TwoWay}"/>
							<TextBlock Grid.Column="1" Text=" × " VerticalAlignment="Center"/>
							<NumericUpDown Classes="Dialog_NumericUpDown" Grid.Column="2" IsEnabled="{Binding IsSourceFileOpened}" Maximum="65535" Minimum="1" Value="{Binding ImageHeight, Mode=TwoWay}"/>
						</Grid>
						<Separator Classes="Dialog_Separator_Small"/>
						<ToggleButton Name="evaluateImageDimensionsButton" Classes="SessionControl_OptionsPanel_ToggleButton" Command="{Binding $parent[UserControl].ShowEvaluateImageDimensionsMenuCommand}" Content="{DynamicResource String/SessionControl.EvaluateImageDimensions}" IsEnabled="{Binding CanChangeImageRenderer}"/>
						<Separator Classes="Dialog_Separator"/>

						<!-- Plane options #1 -->
						<Expander Classes="SessionControl_OptionsPanel_Expander" Header="{DynamicResource String/SessionControl.ImagePlaneOptions.1}" IsExpanded="True" IsVisible="{Binding HasImagePlane1}">
							<StackPanel>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.RowStride}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" Value="{Binding RowStride1, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator"/>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.PixelStride}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" Value="{Binding PixelStride1, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator" IsVisible="{Binding IsAdjustableEffectiveBits1}"/>
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding IsAdjustableEffectiveBits1}" Text="{DynamicResource String/SessionControl.EffectiveBits}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" IsVisible="{Binding IsAdjustableEffectiveBits1}" Minimum="1" Value="{Binding EffectiveBits1, Mode=TwoWay}"/>
							</StackPanel>
						</Expander>
						<Separator Classes="Dialog_Separator" IsVisible="{Binding HasImagePlane1}"/>

						<!-- Plane options #2 -->
						<Expander Classes="SessionControl_OptionsPanel_Expander" Header="{DynamicResource String/SessionControl.ImagePlaneOptions.2}" IsExpanded="True" IsVisible="{Binding HasImagePlane2}">
							<StackPanel>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.RowStride}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" Value="{Binding RowStride2, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator"/>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.PixelStride}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" Value="{Binding PixelStride2, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator" IsVisible="{Binding IsAdjustableEffectiveBits2}"/>
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding IsAdjustableEffectiveBits2}" Text="{DynamicResource String/SessionControl.EffectiveBits}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" IsVisible="{Binding IsAdjustableEffectiveBits2}" Minimum="1" Value="{Binding EffectiveBits2, Mode=TwoWay}"/>
							</StackPanel>
						</Expander>
						<Separator Classes="Dialog_Separator" IsVisible="{Binding HasImagePlane2}"/>

						<!-- Plane options #3 -->
						<Expander Classes="SessionControl_OptionsPanel_Expander" Header="{DynamicResource String/SessionControl.ImagePlaneOptions.3}" IsExpanded="True" IsVisible="{Binding HasImagePlane3}">
							<StackPanel>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.RowStride}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" Value="{Binding RowStride3, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator"/>
								<TextBlock Classes="Dialog_TextBlock" Text="{DynamicResource String/SessionControl.PixelStride}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" Value="{Binding PixelStride3, Mode=TwoWay}"/>
								<Separator Classes="Dialog_Separator" IsVisible="{Binding IsAdjustableEffectiveBits3}"/>
								<TextBlock Classes="Dialog_TextBlock" IsVisible="{Binding IsAdjustableEffectiveBits3}" Text="{DynamicResource String/SessionControl.EffectiveBits}"/>
								<NumericUpDown Classes="Dialog_NumericUpDown" IsEnabled="{Binding IsSourceFileOpened}" IsVisible="{Binding IsAdjustableEffectiveBits3}" Minimum="1" Value="{Binding EffectiveBits3, Mode=TwoWay}"/>
							</StackPanel>
						</Expander>
						<Separator Classes="Dialog_Separator" IsVisible="{Binding HasImagePlane3}"/>

						<!-- Apply profile -->
						<Button Classes="SessionControl_OptionsPanel_Button" Command="{Binding ApplyProfileCommand}" Content="{DynamicResource String/SessionControl.ApplyProfile}"/>
						<Separator Classes="Dialog_Separator_Small"/>

						<!-- Save profile -->
						<Button Classes="SessionControl_OptionsPanel_Button" Command="{Binding SaveProfileCommand}" Content="{DynamicResource String/SessionControl.SaveProfile}"/>
						<Separator Classes="Dialog_Separator_Small"/>

						<!-- Save as new profile -->
						<Button Classes="SessionControl_OptionsPanel_Button" Command="{Binding $parent[UserControl].SaveAsNewProfileCommand}" Content="{DynamicResource String/SessionControl.SaveAsNewProfile}"/>
						<Separator Classes="Dialog_Separator_Small"/>

						<!-- Delete profile -->
						<Button Classes="SessionControl_OptionsPanel_Button" Command="{Binding DeleteProfileCommand}" Content="{DynamicResource String/SessionControl.DeleteProfile}"/>

					</StackPanel>
				</ScrollViewer>
			</Border>

			<!-- Splitter -->
			<GridSplitter Background="{DynamicResource Brush/WorkingArea.Panel.Background}" Classes="GridSplitter_Vertical" Grid.Column="2"/>
			
		</Grid>

		<!-- Status bar -->
		<Border Background="{x:Null}" Classes="StatusBar" Grid.Row="2">

			<ia:Interaction.Behaviors>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="Inactive">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/SessionControl.StatusBar.Background.Inactive}"/>
				</iaCore:DataTriggerBehavior>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="Error">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/SessionControl.StatusBar.Background.Error}"/>
				</iaCore:DataTriggerBehavior>
				<iaCore:DataTriggerBehavior Binding="{Binding $parent[UserControl].StatusBarState}" Value="Active">
					<iaCore:ChangePropertyAction PropertyName="Background" Value="{StaticResource Brush/StatusBar.Background}"/>
				</iaCore:DataTriggerBehavior>
			</ia:Interaction.Behaviors>
			
			<Grid ColumnDefinitions="*,Auto" HorizontalAlignment="Stretch">

				<!-- Reserve -->
				<TextBlock Classes="StatusBar_TextBlock" Grid.ColumnSpan="2" Text="{DynamicResource String/SessionControl.NoSourceFileOpened}" Opacity="0"/>

				<!-- Left part -->
				<StackPanel Orientation="Horizontal">

					<!-- File actions -->
					<StackPanel Orientation="Horizontal">
						<TextBlock Classes="StatusBar_TextBlock" IsVisible="{Binding !IsSourceFileOpened}" Text="{DynamicResource String/SessionControl.NoSourceFileOpened}"/>
						<ToggleButton Name="fileActionsButton" Classes="StatusBar_ToggleButton" Command="{Binding $parent[UserControl].ShowFileActions}" IsVisible="{Binding IsSourceFileOpened}" MaxWidth="{DynamicResource Double/SessionControl.StatusBar.FileActions.MaxWidth}">
							<Grid ColumnDefinitions="*,Auto,Auto">
								<TextBlock Text="{Binding SourceFileName}" TextTrimming="CharacterEllipsis"/>
								<TextBlock Grid.Column="1" Text="{Binding SourceFileSizeString, StringFormat={} ({0})}"/>
								<Border Classes="StatusBar_DropDownIcon" Grid.Column="2">
									<Image Classes="Icon">
										<DrawingImage>
											<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.MoveUp}"/>
										</DrawingImage>
									</Image>
								</Border>
							</Grid>
						</ToggleButton>
						<Separator Classes="StatusBar_Separator"/>
					</StackPanel>

					<!-- Source data size -->
					<StackPanel Background="{x:Static Brushes.Transparent}" IsVisible="{Binding HasRenderedImage}" Orientation="Horizontal" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.SourceDataSize}">
						<Border Classes="StatusBar_Icon">
							<Image Classes="Icon">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.BinaryData}"/>
								</DrawingImage>
							</Image>
						</Border>
						<TextBlock Classes="StatusBar_TextBlock" Text="{Binding SourceDataSize, StringFormat={}{0:N0} }"/>
						<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/Common.Bytes}"/>
					</StackPanel>
					<Separator Classes="StatusBar_Separator" IsVisible="{Binding HasRenderedImage}"/>

					<!-- Selected pixel -->
					<StackPanel IsVisible="{Binding HasSelectedRenderedImagePixel}" Orientation="Horizontal">

						<!-- Position -->
						<Border Classes="StatusBar_Icon">
							<Image Classes="Icon">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.Coordinates}"/>
								</DrawingImage>
							</Image>
						</Border>
						<TextBlock Classes="StatusBar_TextBlock">
							<TextBlock.Text>
								<MultiBinding StringFormat="{}({0},{1})">
									<Binding Path="SelectedRenderedImagePixelPositionX"/>
									<Binding Path="SelectedRenderedImagePixelPositionY"/>
								</MultiBinding>
							</TextBlock.Text>
						</TextBlock>

						<!-- Color -->
						<Separator Classes="StatusBar_Separator"/>
						<Border Classes="StatusBar_Icon">
							<Image Classes="Icon">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.Color}"/>
								</DrawingImage>
							</Image>
						</Border>
						<TextBlock Classes="StatusBar_TextBlock">
							<TextBlock.Text>
								<MultiBinding StringFormat="{}#{0:X2}{1:X2}{2:X2}{3:X2}">
									<Binding Path="SelectedRenderedImagePixelColor.A"/>
									<Binding Path="SelectedRenderedImagePixelColor.R"/>
									<Binding Path="SelectedRenderedImagePixelColor.G"/>
									<Binding Path="SelectedRenderedImagePixelColor.B"/>
								</MultiBinding>
							</TextBlock.Text>
						</TextBlock>

					</StackPanel>

				</StackPanel>

				<!-- Right part -->
				<StackPanel Grid.Column="1" Orientation="Horizontal">
					
					<!-- Saving image -->
					<StackPanel IsVisible="{Binding IsSavingImage}" Orientation="Horizontal">
						<Separator Classes="StatusBar_Separator"/>
						<Border Classes="StatusBar_Icon">
							<Image Classes="Icon">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.Save}"/>
								</DrawingImage>
							</Image>
						</Border>
						<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionControl.SavingRenderedImage}"/>
					</StackPanel>

					<!-- Filtering image -->
					<StackPanel IsVisible="{Binding IsFilteringRenderedImage}" Orientation="Horizontal">
						<Separator Classes="StatusBar_Separator"/>
						<Border Classes="StatusBar_Icon">
							<Image Classes="Icon">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.ImageFilter}"/>
								</DrawingImage>
							</Image>
						</Border>
						<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionControl.FilteringRenderedImage}"/>
					</StackPanel>

					<!-- Rendering image -->
					<StackPanel IsVisible="{Binding IsRenderingImage}" Orientation="Horizontal">
						<Separator Classes="StatusBar_Separator"/>
						<Border Classes="StatusBar_Icon">
							<Image Classes="Icon">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.Waiting}"/>
								</DrawingImage>
							</Image>
						</Border>
						<TextBlock Classes="StatusBar_TextBlock" Text="{DynamicResource String/SessionControl.RenderingImage}"/>
					</StackPanel>

					<!-- Process info -->
					<StackPanel IsVisible="{Binding $parent[UserControl].ShowProcessInfo}" Orientation="Horizontal">
						
						<!-- UI response duration -->
						<StackPanel IsVisible="{Binding Source={x:Static app:App.Current}, Path=IsDebugMode}" Orientation="Horizontal">
							<Separator Classes="StatusBar_Separator"/>
							<Border Classes="StatusBar_Icon">
								<Image Classes="Icon">
									<DrawingImage>
										<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.Speed}"/>
									</DrawingImage>
								</Image>
							</Border>
							<Panel>
								<TextBlock Classes="StatusBar_TextBlock" Opacity="0" Text="000 ms   "/>
								<TextBlock Classes="StatusBar_TextBlock" HorizontalAlignment="Left" Text="{Binding Source={x:Static app:App.Current}, Path=ProcessInfo.UIResponseDuration, Converter={x:Static asConverters:TimeSpanConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.UIResponseDuration}"/>
							</Panel>
						</StackPanel>

						<!-- CPU usage -->
						<Separator Classes="StatusBar_Separator"/>
						<Border Classes="StatusBar_Icon">
							<Image Classes="Icon">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.Cpu}"/>
								</DrawingImage>
							</Image>
						</Border>
						<Panel>
							<TextBlock Classes="StatusBar_TextBlock" Opacity="0" Text="00.0%"/>
							<TextBlock Classes="StatusBar_TextBlock" HorizontalAlignment="Left" Text="{Binding Source={x:Static app:App.Current}, Path=ProcessInfo.CpuUsagePercentage, StringFormat={}{0:F1}%}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.CpuUsage}"/>
						</Panel>

						<!-- Memory usage -->
						<Separator Classes="StatusBar_Separator"/>
						<Border Classes="StatusBar_Icon">
							<Image Classes="Icon">
								<DrawingImage>
									<GeometryDrawing Brush="{DynamicResource Brush/StatusBar.Foreground}" Geometry="{DynamicResource Geometry/Icon.Memory}"/>
								</DrawingImage>
							</Image>
						</Border>
						<Panel>
							<TextBlock Classes="StatusBar_TextBlock" Opacity="0" Text="000.0%"/>
							<StackPanel Orientation="Horizontal" VerticalAlignment="Center">
								<TextBlock Classes="StatusBar_TextBlock" Text="{Binding RenderedImagesMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.RenderedImagesMemoryUsage}"/>
								<TextBlock Classes="StatusBar_TextBlock" Text="{Binding TotalRenderedImagesMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}, StringFormat={}/{0}}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.TotalRenderedImagesMemoryUsage}"/>
								<TextBlock Classes="StatusBar_TextBlock" IsVisible="{Binding $parent[UserControl].IsNotMacOS}" Text="{Binding Source={x:Static app:App.Current}, Path=ProcessInfo.PrivateMemoryUsage, Converter={x:Static asConverters:FileSizeConverter.Default}, StringFormat={}/{0}}}" ToolTip.Placement="Left" ToolTip.Tip="{DynamicResource String/SessionControl.PrivateMemoryUsage}"/>
							</StackPanel>
						</Panel>

					</StackPanel>

				</StackPanel>
				
			</Grid>
		</Border>
		
	</Grid>
</UserControl>
